diff --git a/packages/automator/index.tsx b/packages/automator/index.tsx
index 689a0ec39..9d531627d 100755
--- a/packages/automator/index.tsx
+++ b/packages/automator/index.tsx
@@ -12,13 +12,14 @@ import {
   stepUntilConvergence,
 } from "@penrose/core";
 import { ShapeDef } from "@penrose/core/build/dist/shapes/Shapes";
+import { State } from "@penrose/core/build/dist/types/state";
 import chalk from "chalk";
 import convertHrtime from "convert-hrtime";
 import { randomBytes } from "crypto";
 import * as fs from "fs";
 import neodoc from "neodoc";
 import fetch from "node-fetch";
-import { dirname, join, parse, resolve } from "path";
+import { basename, dirname, join, parse, resolve } from "path";
 import * as prettier from "prettier";
 import uniqid from "uniqid";
 import { renderArtifacts } from "./artifacts";
@@ -36,7 +37,7 @@ Options:
   -o, --outFile PATH Path to either a file or a folder, depending on the value of --folders. [default: output.svg]
   --folders Include metadata about each output diagram. If enabled, outFile has to be a path to a folder.
   --src-prefix PREFIX the prefix to SUBSTANCE, STYLE, and DOMAIN, or the library equivalent in batch mode. No trailing "/" required. [default: .]
-  --repeat TIMES the number of instances 
+  --repeat TIMES the number of instances
   --staged Generate staged SVGs of the final diagram
   --cross-energy Compute the cross-instance energy
   --variation The variation to use
@@ -60,6 +61,26 @@ const nonZeroConstraints = (
 
 const toMs = (hr: any) => hr[1] / 1000000;
 
+const gatherData = (state: State): string => JSON.stringify(
+  {
+    varyingValues: state.varyingValues,
+    inputs: state.inputs.map((meta) => Object.keys(meta)[0]),
+    canvas: state.canvas,
+    params: {
+      lastGradient: state.params.lastGradient,
+      lastGradientPreconditioned:
+        state.params.lastGradientPreconditioned,
+      weight: state.params.weight,
+      UOround: state.params.UOround,
+      EPround: state.params.EPround,
+      optStatus: state.params.optStatus,
+      lbfgsInfo: state.params.lbfgsInfo,
+    },
+  },
+  null,
+  2
+);
+
 // In an async context, communicate with the backend to compile and optimize the diagram
 const singleProcess = async (
   variation: string,
@@ -107,19 +128,36 @@ const singleProcess = async (
   const initialState = await prepareState(compiledState);
   const labelEnd = process.hrtime(labelStart);
 
+  const initialData = gatherData(initialState);
   console.log(`Stepping for ${out} ...`);
 
   const convergeStart = process.hrtime();
   let optimizedState;
-  const optimizedOutput = stepUntilConvergence(initialState, 10000);
-  if (optimizedOutput.isOk()) {
-    optimizedState = optimizedOutput.value;
+  if (folders) {
+    const optimizedOutput = stepUntilConvergence(initialState, 10000);
+    if (optimizedOutput.isOk()) {
+      optimizedState = optimizedOutput.value;
+    } else {
+      throw new Error(
+        `Optimization failed:\n${showError(optimizedOutput.error)}`
+      );
+    }
   } else {
-    throw new Error(
-      `Optimization failed:\n${showError(optimizedOutput.error)}`
-    );
+    optimizedState = initialState;
+    const p = `${join('../../../out', basename(out, '.svg'))}.json`;
+    const data = fs.readFileSync(p, 'utf8').toString();
+    optimizedState.varyingValues = JSON.parse(data).varying_values;
   }
   const convergeEnd = process.hrtime(convergeStart);
+  const finalData = gatherData(optimizedState);
+  const objGradStart = process.hrtime();
+
+  const numObjGradCalls = optimizedState.params.objGradCounter.numCalls;
+  for (let i = 0; i < numObjGradCalls; i++) {
+    optimizedState.params.currObjectiveAndGradient(optimizedState.varyingValues);
+  }
+
+  const objGradEnd = process.hrtime(objGradStart);
   const reactRenderStart = process.hrtime();
 
   // make a list of canvas data if staged (prepare to generate multiple SVGs)
@@ -199,6 +237,9 @@ const singleProcess = async (
     const metadata = {
       ...meta,
       renderedOn: Date.now(),
+      numObjs: optimizedState.objFns.length,
+      numConstrs: optimizedState.constrFns.length,
+      numObjGradCalls,
       timeTaken: {
         // includes overhead like JSON, recollecting labels
         overall: convertHrtime(overallEnd).milliseconds,
@@ -206,6 +247,7 @@ const singleProcess = async (
         labelling: convertHrtime(labelEnd).milliseconds,
         optimization: convertHrtime(convergeEnd).milliseconds,
         rendering: convertHrtime(reactRenderEnd).milliseconds,
+        justCallingObjGrad: convertHrtime(objGradEnd).milliseconds,
       },
       // violatingConstraints: constrs,
       // nonzeroConstraints: constrs.length > 0,
@@ -245,6 +287,9 @@ const singleProcess = async (
     fs.writeFileSync(join(out, "style.sty"), styIn);
     fs.writeFileSync(join(out, "domain.dsl"), dslIn);
     fs.writeFileSync(join(out, "meta.json"), JSON.stringify(metadata, null, 2));
+    fs.writeFileSync(join(out, "initial.json"), initialData);
+    fs.writeFileSync(join(out, "final.json"), finalData);
+    fs.writeFileSync(join(out, "objgrad.c"), optimizedState.params.objectiveAndGradient.src);
     console.log(
       chalk.green(`The diagram and metadata has been saved to ${out}`)
     );
diff --git a/packages/core/src/engine/Autodiff.ts b/packages/core/src/engine/Autodiff.ts
index bd318aa16..2e44b904e 100644
--- a/packages/core/src/engine/Autodiff.ts
+++ b/packages/core/src/engine/Autodiff.ts
@@ -1077,12 +1077,228 @@ const polyRoots = (coeffs: number[]): number[] => {
   ).map(([r, i]) => (i === 0 ? r : NaN));
 };
 
-export const genCode = ({
-  graph,
-  gradient,
-  primary,
-  secondary,
-}: ad.Graph): ad.Compiled => {
+/**
+ * Generate C code instead of JavaScript.
+ */
+const genC = ({ graph, gradient, primary, secondary }: ad.Graph): string => {
+  const compileUnary = ({ unop }: ad.UnaryNode, param: ad.Id): string => {
+    switch (unop) {
+      case "neg": {
+        return `-${param}`;
+      }
+      case "squared": {
+        return `${param} * ${param}`;
+      }
+      case "inverse": {
+        return `1 / (${param} + ${EPS_DENOM})`;
+      }
+      case "sqrt": // NOTE: Watch out for negative numbers in sqrt
+      case "acosh":
+      case "acos":
+      case "asin":
+      case "asinh":
+      case "atan":
+      case "atanh":
+      case "cbrt":
+      case "ceil":
+      case "cos":
+      case "cosh":
+      case "exp":
+      case "expm1":
+      case "floor":
+      case "log":
+      case "log2":
+      case "log10":
+      case "log1p":
+      case "round":
+      case "sin":
+      case "sinh":
+      case "tan":
+      case "tanh":
+      case "trunc": {
+        return `${unop}(${param})`;
+      }
+      case "abs": {
+        return `fabs(${param})`;
+      }
+      case "sign": {
+        return `copysign(1.0, ${param})`; // https://stackoverflow.com/a/1905142
+      }
+    }
+  };
+
+  const compileBinary = (
+    { binop }: ad.BinaryNode | ad.CompNode | ad.LogicNode,
+    left: ad.Id,
+    right: ad.Id
+  ): string => {
+    switch (binop) {
+      case "+":
+      case "*":
+      case "-":
+      case "/":
+      case ">":
+      case "<":
+      case ">=":
+      case "<=":
+      case "&&":
+      case "||": {
+        return `${left} ${binop} ${right}`;
+      }
+      case "===": {
+        return `${left} == ${right}`;
+      }
+      case "max": {
+        return `fmax(${left}, ${right})`;
+      }
+      case "min": {
+        return `fmin(${left}, ${right})`;
+      }
+      case "atan2":
+      case "pow": {
+        return `${binop}(${left}, ${right})`;
+      }
+    }
+  };
+
+  const compileNary = ({ op }: ad.NaryNode, params: ad.Id[]): string => {
+    switch (op) {
+      case "addN": {
+        return params.length > 0 ? params.join(" + ") : "0";
+      }
+      case "maxN": {
+        if (params.length === 0) {
+          return "-INFINITY";
+        } else if (params.length === 1) {
+          return params[0];
+        } else {
+          const str: string = params[0];
+          return params
+            .slice(1)
+            .reduce((soFar, param) => `fmax(${soFar}, ${param})`, str);
+        }
+      }
+      case "minN": {
+        if (params.length === 0) {
+          return "INFINITY";
+        } else if (params.length === 1) {
+          return params[0];
+        } else {
+          const str: string = params[0];
+          return params
+            .slice(1)
+            .reduce((soFar, param) => `fmin(${soFar}, ${param})`, str);
+        }
+      }
+    }
+  };
+
+  const compileNode = (
+    node: Exclude<ad.Node, ad.InputNode>,
+    preds: Map<ad.Edge, ad.Id>
+  ): string => {
+    if (typeof node === "number") {
+      return `${node}`;
+    }
+    switch (node.tag) {
+      case "Not": {
+        const child = safe(preds.get(undefined), "missing node");
+        return `!${child}`;
+      }
+      case "Unary": {
+        return compileUnary(node, safe(preds.get(undefined), "missing param"));
+      }
+      case "Binary":
+      case "Comp":
+      case "Logic": {
+        return compileBinary(
+          node,
+          safe(preds.get("left"), "missing left"),
+          safe(preds.get("right"), "missing right")
+        );
+      }
+      case "Ternary": {
+        const cond = safe(preds.get("cond"), "missing cond");
+        const then = safe(preds.get("then"), "missing then");
+        const els = safe(preds.get("els"), "missing els");
+        return `${cond} ? ${then} : ${els}`;
+      }
+      case "Nary": {
+        return compileNary(node, naryParams(preds));
+      }
+      case "PolyRoots": {
+        return `polyRoots([${naryParams(preds).join(", ")}])`;
+      }
+      case "Index": {
+        const vec = safe(preds.get(undefined), "missing vec");
+        return `${vec}[${node.index}]`;
+      }
+      case "Debug": {
+        const info = JSON.stringify(node.info);
+        const child = safe(preds.get(undefined), "missing node");
+        return `printf("%s | value: %d\n", ${info}, ${child}), ${child}`;
+      }
+    }
+  };
+
+  const bools = new Map<ad.Id, number>();
+  const floats = new Map<ad.Id, number>();
+  for (const id of graph.nodes()) {
+    const node = graph.node(id);
+    if (typeof node === "number") {
+      floats.set(id, floats.size);
+    } else {
+      switch (node.tag) {
+        case "Comp":
+        case "Logic":
+        case "Not": {
+          bools.set(id, bools.size);
+          break;
+        }
+        case "Input":
+        case "Unary":
+        case "Binary":
+        case "Ternary":
+        case "Nary":
+        case "Index":
+        case "Debug": {
+          floats.set(id, floats.size);
+          break;
+        }
+        case "PolyRoots": {
+          throw Error("Vec :(");
+        }
+      }
+    }
+  }
+  const getType = (id: ad.Id): string => (bools.has(id) ? "bool" : "double");
+  const stmts = [`#include <math.h>
+#include <stdbool.h>
+
+double objective_and_gradient(double *inputs, double *gradient, double *secondary)
+{`, ...getInputs(graph).map(
+    ({ id, label: { key } }) => `double ${id} = inputs[${key}];`
+  )];
+  for (const id of graph.topsort()) {
+    const node = graph.node(id);
+    // we already generated code for the inputs
+    if (typeof node === "number" || node.tag !== "Input") {
+      const preds = new Map(graph.inEdges(id).map(({ v, name }) => [name, v]));
+      stmts.push(`${getType(id)} ${id} = ${compileNode(node, preds)};`);
+    }
+  }
+  gradient.forEach((id, i) => {
+    stmts.push(`gradient[${i}] = ${id};`);
+  });
+  secondary.forEach((id, i) => {
+    stmts.push(`secondary[${i}] = ${id};`);
+  });
+  stmts.push(`return ${primary};\n}\n`);
+  return stmts.join("\n  ");
+};
+
+export const genCode = (g: ad.Graph): ad.Compiled => {
+  const { graph, gradient, primary, secondary } = g;
   const stmts = getInputs(graph).map(
     ({ id, label: { key } }) => `const ${id} = inputs[${key}];`
   );
@@ -1105,5 +1321,7 @@ export const genCode = ({
   ];
   stmts.push(`return { ${fields.join(", ")} };`);
   const f = new Function("polyRoots", "inputs", stmts.join("\n"));
-  return (inputs) => f(polyRoots, inputs);
+  const wrapped = (inputs: number[]) => f(polyRoots, inputs);
+  wrapped.src = genC(g);
+  return wrapped;
 };
diff --git a/packages/core/src/engine/Optimizer.ts b/packages/core/src/engine/Optimizer.ts
index cc0547554..72d7b8d06 100644
--- a/packages/core/src/engine/Optimizer.ts
+++ b/packages/core/src/engine/Optimizer.ts
@@ -807,8 +807,10 @@ export const genOptProblem = (
   });
 
   const f = genCode(explicitGraph);
+  let objGradCounter = { numCalls: 0 };
 
   const objectiveAndGradient = (epWeight: number) => (xs: number[]) => {
+    objGradCounter.numCalls++;
     const { primary, gradient, secondary } = f([...xs, epWeight]);
     return {
       f: primary,
@@ -821,6 +823,7 @@ export const genOptProblem = (
       constrEngs: secondary.slice(objEngs.length),
     };
   };
+  objectiveAndGradient.src = f["src"];
 
   const params: Params = {
     lastGradient: repeat(inputs.length, 0),
@@ -830,6 +833,8 @@ export const genOptProblem = (
 
     currObjectiveAndGradient: objectiveAndGradient(weight),
 
+    objGradCounter,
+
     energyGraph,
     weight,
     UOround: 0,
diff --git a/packages/core/src/types/state.ts b/packages/core/src/types/state.ts
index f22be1f94..55df3909d 100644
--- a/packages/core/src/types/state.ts
+++ b/packages/core/src/types/state.ts
@@ -81,6 +81,10 @@ export interface FnEvaled {
   constrEngs: number[];
 }
 
+export interface CallCounter {
+  numCalls: number;
+}
+
 export interface Params {
   optStatus: OptStatus;
   /** Constraint weight for exterior point method **/
@@ -110,6 +114,8 @@ export interface Params {
   // Applied with weight (or hyperparameters in general) -- may change with the EP round
   currObjectiveAndGradient(xs: number[]): FnEvaled;
 
+  objGradCounter: CallCounter;
+
   energyGraph: ad.Num; // This is the top of the energy graph (parent node)
 }
 
